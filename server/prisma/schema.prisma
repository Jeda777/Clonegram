generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(uuid())
  username String @unique
  imageUrl String @db.Text
  password String @db.Text
  email String @unique
  description String? @db.Text

  refreshToken String @db.Text

  private Boolean @default(false)

  notificationsRecived Notification[] @relation("recivedNorifications")
  notificationsSend Notification[] @relation("sentNotifications")

  posts Post[]
  comments Comment[]
  likes Like[]

  conversationsInitiated Conversation[] @relation("user1")
  conversationsReceived Conversation[] @relation("user2")

  messages Message[]

  following Follow[] @relation("following")
  followers Follow[] @relation("followers")

  followingRequest FollowRequest[] @relation("following")
  followersRequest FollowRequest[] @relation("followers")
}

enum NotificationTypes {
  FollowRequest
  Follow
  Like
  Comment
}

model Notification {
  id String @id @default(uuid())
  receiverUserId String
  receiverUser User @relation("recivedNorifications", fields: [receiverUserId], references: [id], onDelete: Cascade)
  type NotificationTypes
  fromUserId String
  fromUser User @relation("sentNotifications", fields: [fromUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([receiverUserId])
  @@index([fromUserId])
}

model Follow {
  id String @id @default(uuid())
  followerId String
  follower User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  userId String
  user User @relation("followers", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([followerId])
  @@index([userId])
}

model FollowRequest {
  id String @id @default(uuid())
  followerId String
  follower User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  userId String
  user User @relation("followers", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([followerId])
  @@index([userId])
}

model Post {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl String @db.Text

  createdAt DateTime @default(now())

  comments Comment[]
  likes Like[]

  @@index([userId])
}

model Comment {
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  content String @db.Text

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Like {
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Conversation {
  id String @id @default(uuid())
  userId1 String
  user1 User @relation("user1", fields: [userId1], references: [id], onDelete: Cascade)
  userId2 String
  user2 User @relation("user2", fields: [userId2], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([userId1])
  @@index([userId2])
}

model Message {
  id String @id @default(uuid())
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content String @db.Text
  senderId String
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([conversationId])
  @@index([senderId])
}